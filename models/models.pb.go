// Code generated by protoc-gen-gogo.
// source: proto/models.proto
// DO NOT EDIT!

/*
	Package models is a generated protocol buffer package.

	It is generated from these files:
		proto/models.proto

	It has these top-level messages:
		PiRequest
		PiResponse
		VMatrixRequest
		VMatrixResponse
		Row
		WorkerLine
		Worker
		MMatrixRequest
		WorkerNetwork
		MMatrixResponse
		SortRequest
		SortResponse
*/
package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PiRequest struct {
	Radius     uint64 `protobuf:"varint,1,opt,name=radius,proto3" json:"radius,omitempty"`
	Iterations uint64 `protobuf:"varint,2,opt,name=iterations,proto3" json:"iterations,omitempty"`
}

func (m *PiRequest) Reset()                    { *m = PiRequest{} }
func (m *PiRequest) String() string            { return proto.CompactTextString(m) }
func (*PiRequest) ProtoMessage()               {}
func (*PiRequest) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{0} }

func (m *PiRequest) GetRadius() uint64 {
	if m != nil {
		return m.Radius
	}
	return 0
}

func (m *PiRequest) GetIterations() uint64 {
	if m != nil {
		return m.Iterations
	}
	return 0
}

type PiResponse struct {
	Hit        uint64 `protobuf:"varint,1,opt,name=hit,proto3" json:"hit,omitempty"`
	Iterations uint64 `protobuf:"varint,2,opt,name=iterations,proto3" json:"iterations,omitempty"`
}

func (m *PiResponse) Reset()                    { *m = PiResponse{} }
func (m *PiResponse) String() string            { return proto.CompactTextString(m) }
func (*PiResponse) ProtoMessage()               {}
func (*PiResponse) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{1} }

func (m *PiResponse) GetHit() uint64 {
	if m != nil {
		return m.Hit
	}
	return 0
}

func (m *PiResponse) GetIterations() uint64 {
	if m != nil {
		return m.Iterations
	}
	return 0
}

type VMatrixRequest struct {
	Size_      uint64          `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Vector     []float64       `protobuf:"fixed64,2,rep,packed,name=vector" json:"vector,omitempty"`
	MatrixRows map[uint64]*Row `protobuf:"bytes,3,rep,name=matrixRows" json:"matrixRows,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *VMatrixRequest) Reset()                    { *m = VMatrixRequest{} }
func (m *VMatrixRequest) String() string            { return proto.CompactTextString(m) }
func (*VMatrixRequest) ProtoMessage()               {}
func (*VMatrixRequest) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{2} }

func (m *VMatrixRequest) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *VMatrixRequest) GetVector() []float64 {
	if m != nil {
		return m.Vector
	}
	return nil
}

func (m *VMatrixRequest) GetMatrixRows() map[uint64]*Row {
	if m != nil {
		return m.MatrixRows
	}
	return nil
}

type VMatrixResponse struct {
	ResultVector map[uint64]float64 `protobuf:"bytes,1,rep,name=resultVector" json:"resultVector,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (m *VMatrixResponse) Reset()                    { *m = VMatrixResponse{} }
func (m *VMatrixResponse) String() string            { return proto.CompactTextString(m) }
func (*VMatrixResponse) ProtoMessage()               {}
func (*VMatrixResponse) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{3} }

func (m *VMatrixResponse) GetResultVector() map[uint64]float64 {
	if m != nil {
		return m.ResultVector
	}
	return nil
}

type Row struct {
	Row []float64 `protobuf:"fixed64,1,rep,packed,name=row" json:"row,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{4} }

func (m *Row) GetRow() []float64 {
	if m != nil {
		return m.Row
	}
	return nil
}

type WorkerLine struct {
	Workers []*Worker `protobuf:"bytes,1,rep,name=workers" json:"workers,omitempty"`
}

func (m *WorkerLine) Reset()                    { *m = WorkerLine{} }
func (m *WorkerLine) String() string            { return proto.CompactTextString(m) }
func (*WorkerLine) ProtoMessage()               {}
func (*WorkerLine) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{5} }

func (m *WorkerLine) GetWorkers() []*Worker {
	if m != nil {
		return m.Workers
	}
	return nil
}

type Worker struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Id   uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Worker) Reset()                    { *m = Worker{} }
func (m *Worker) String() string            { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()               {}
func (*Worker) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{6} }

func (m *Worker) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Worker) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MMatrixRequest struct {
	I        uint64           `protobuf:"varint,1,opt,name=i,proto3" json:"i,omitempty"`
	J        uint64           `protobuf:"varint,2,opt,name=j,proto3" json:"j,omitempty"`
	Rows     uint64           `protobuf:"varint,4,opt,name=rows,proto3" json:"rows,omitempty"`
	Brows    uint64           `protobuf:"varint,6,opt,name=brows,proto3" json:"brows,omitempty"`
	Bcolumns uint64           `protobuf:"varint,7,opt,name=bcolumns,proto3" json:"bcolumns,omitempty"`
	Iter     uint64           `protobuf:"varint,8,opt,name=iter,proto3" json:"iter,omitempty"`
	A        *MMatrixResponse `protobuf:"bytes,9,opt,name=a" json:"a,omitempty"`
	B        *MMatrixResponse `protobuf:"bytes,10,opt,name=b" json:"b,omitempty"`
}

func (m *MMatrixRequest) Reset()                    { *m = MMatrixRequest{} }
func (m *MMatrixRequest) String() string            { return proto.CompactTextString(m) }
func (*MMatrixRequest) ProtoMessage()               {}
func (*MMatrixRequest) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{7} }

func (m *MMatrixRequest) GetI() uint64 {
	if m != nil {
		return m.I
	}
	return 0
}

func (m *MMatrixRequest) GetJ() uint64 {
	if m != nil {
		return m.J
	}
	return 0
}

func (m *MMatrixRequest) GetRows() uint64 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *MMatrixRequest) GetBrows() uint64 {
	if m != nil {
		return m.Brows
	}
	return 0
}

func (m *MMatrixRequest) GetBcolumns() uint64 {
	if m != nil {
		return m.Bcolumns
	}
	return 0
}

func (m *MMatrixRequest) GetIter() uint64 {
	if m != nil {
		return m.Iter
	}
	return 0
}

func (m *MMatrixRequest) GetA() *MMatrixResponse {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *MMatrixRequest) GetB() *MMatrixResponse {
	if m != nil {
		return m.B
	}
	return nil
}

type WorkerNetwork struct {
	WorkerMatrix map[uint64]*WorkerLine `protobuf:"bytes,1,rep,name=workerMatrix" json:"workerMatrix,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WorkerNetwork) Reset()                    { *m = WorkerNetwork{} }
func (m *WorkerNetwork) String() string            { return proto.CompactTextString(m) }
func (*WorkerNetwork) ProtoMessage()               {}
func (*WorkerNetwork) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{8} }

func (m *WorkerNetwork) GetWorkerMatrix() map[uint64]*WorkerLine {
	if m != nil {
		return m.WorkerMatrix
	}
	return nil
}

type MMatrixResponse struct {
	I uint64 `protobuf:"varint,1,opt,name=i,proto3" json:"i,omitempty"`
	J uint64 `protobuf:"varint,2,opt,name=j,proto3" json:"j,omitempty"`
	T []*Row `protobuf:"bytes,3,rep,name=t" json:"t,omitempty"`
}

func (m *MMatrixResponse) Reset()                    { *m = MMatrixResponse{} }
func (m *MMatrixResponse) String() string            { return proto.CompactTextString(m) }
func (*MMatrixResponse) ProtoMessage()               {}
func (*MMatrixResponse) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{9} }

func (m *MMatrixResponse) GetI() uint64 {
	if m != nil {
		return m.I
	}
	return 0
}

func (m *MMatrixResponse) GetJ() uint64 {
	if m != nil {
		return m.J
	}
	return 0
}

func (m *MMatrixResponse) GetT() []*Row {
	if m != nil {
		return m.T
	}
	return nil
}

type SortRequest struct {
	Iter     uint64   `protobuf:"varint,1,opt,name=iter,proto3" json:"iter,omitempty"`
	Number   uint64   `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	DataLine []uint32 `protobuf:"varint,3,rep,packed,name=dataLine" json:"dataLine,omitempty"`
}

func (m *SortRequest) Reset()                    { *m = SortRequest{} }
func (m *SortRequest) String() string            { return proto.CompactTextString(m) }
func (*SortRequest) ProtoMessage()               {}
func (*SortRequest) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{10} }

func (m *SortRequest) GetIter() uint64 {
	if m != nil {
		return m.Iter
	}
	return 0
}

func (m *SortRequest) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *SortRequest) GetDataLine() []uint32 {
	if m != nil {
		return m.DataLine
	}
	return nil
}

type SortResponse struct {
	Number   uint64   `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	DataLine []uint32 `protobuf:"varint,2,rep,packed,name=dataLine" json:"dataLine,omitempty"`
}

func (m *SortResponse) Reset()                    { *m = SortResponse{} }
func (m *SortResponse) String() string            { return proto.CompactTextString(m) }
func (*SortResponse) ProtoMessage()               {}
func (*SortResponse) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{11} }

func (m *SortResponse) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *SortResponse) GetDataLine() []uint32 {
	if m != nil {
		return m.DataLine
	}
	return nil
}

func init() {
	proto.RegisterType((*PiRequest)(nil), "models.PiRequest")
	proto.RegisterType((*PiResponse)(nil), "models.PiResponse")
	proto.RegisterType((*VMatrixRequest)(nil), "models.VMatrixRequest")
	proto.RegisterType((*VMatrixResponse)(nil), "models.VMatrixResponse")
	proto.RegisterType((*Row)(nil), "models.Row")
	proto.RegisterType((*WorkerLine)(nil), "models.WorkerLine")
	proto.RegisterType((*Worker)(nil), "models.Worker")
	proto.RegisterType((*MMatrixRequest)(nil), "models.MMatrixRequest")
	proto.RegisterType((*WorkerNetwork)(nil), "models.WorkerNetwork")
	proto.RegisterType((*MMatrixResponse)(nil), "models.MMatrixResponse")
	proto.RegisterType((*SortRequest)(nil), "models.SortRequest")
	proto.RegisterType((*SortResponse)(nil), "models.SortResponse")
}
func (m *PiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Radius != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Radius))
	}
	if m.Iterations != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Iterations))
	}
	return i, nil
}

func (m *PiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Hit))
	}
	if m.Iterations != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Iterations))
	}
	return i, nil
}

func (m *VMatrixRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMatrixRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Size_))
	}
	if len(m.Vector) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Vector)*8))
		for _, num := range m.Vector {
			f1 := math.Float64bits(float64(num))
			dAtA[i] = uint8(f1)
			i++
			dAtA[i] = uint8(f1 >> 8)
			i++
			dAtA[i] = uint8(f1 >> 16)
			i++
			dAtA[i] = uint8(f1 >> 24)
			i++
			dAtA[i] = uint8(f1 >> 32)
			i++
			dAtA[i] = uint8(f1 >> 40)
			i++
			dAtA[i] = uint8(f1 >> 48)
			i++
			dAtA[i] = uint8(f1 >> 56)
			i++
		}
	}
	if len(m.MatrixRows) > 0 {
		for k, _ := range m.MatrixRows {
			dAtA[i] = 0x1a
			i++
			v := m.MatrixRows[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovModels(uint64(msgSize))
			}
			mapSize := 1 + sovModels(uint64(k)) + msgSize
			i = encodeVarintModels(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintModels(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintModels(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func (m *VMatrixResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMatrixResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResultVector) > 0 {
		for k, _ := range m.ResultVector {
			dAtA[i] = 0xa
			i++
			v := m.ResultVector[k]
			mapSize := 1 + sovModels(uint64(k)) + 1 + 8
			i = encodeVarintModels(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintModels(dAtA, i, uint64(k))
			dAtA[i] = 0x11
			i++
			i = encodeFixed64Models(dAtA, i, uint64(math.Float64bits(float64(v))))
		}
	}
	return i, nil
}

func (m *Row) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Row) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Row) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Row)*8))
		for _, num := range m.Row {
			f3 := math.Float64bits(float64(num))
			dAtA[i] = uint8(f3)
			i++
			dAtA[i] = uint8(f3 >> 8)
			i++
			dAtA[i] = uint8(f3 >> 16)
			i++
			dAtA[i] = uint8(f3 >> 24)
			i++
			dAtA[i] = uint8(f3 >> 32)
			i++
			dAtA[i] = uint8(f3 >> 40)
			i++
			dAtA[i] = uint8(f3 >> 48)
			i++
			dAtA[i] = uint8(f3 >> 56)
			i++
		}
	}
	return i, nil
}

func (m *WorkerLine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerLine) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workers) > 0 {
		for _, msg := range m.Workers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintModels(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Worker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Worker) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *MMatrixRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MMatrixRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.I != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.I))
	}
	if m.J != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.J))
	}
	if m.Rows != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Rows))
	}
	if m.Brows != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Brows))
	}
	if m.Bcolumns != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Bcolumns))
	}
	if m.Iter != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Iter))
	}
	if m.A != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.A.Size()))
		n4, err := m.A.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.B != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.B.Size()))
		n5, err := m.B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *WorkerNetwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerNetwork) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WorkerMatrix) > 0 {
		for k, _ := range m.WorkerMatrix {
			dAtA[i] = 0xa
			i++
			v := m.WorkerMatrix[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovModels(uint64(msgSize))
			}
			mapSize := 1 + sovModels(uint64(k)) + msgSize
			i = encodeVarintModels(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintModels(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintModels(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	return i, nil
}

func (m *MMatrixResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MMatrixResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.I != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.I))
	}
	if m.J != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.J))
	}
	if len(m.T) > 0 {
		for _, msg := range m.T {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintModels(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SortRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Iter != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Iter))
	}
	if m.Number != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Number))
	}
	if len(m.DataLine) > 0 {
		dAtA8 := make([]byte, len(m.DataLine)*10)
		var j7 int
		for _, num := range m.DataLine {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModels(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *SortResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Number))
	}
	if len(m.DataLine) > 0 {
		dAtA10 := make([]byte, len(m.DataLine)*10)
		var j9 int
		for _, num := range m.DataLine {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintModels(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func encodeFixed64Models(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Models(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PiRequest) Size() (n int) {
	var l int
	_ = l
	if m.Radius != 0 {
		n += 1 + sovModels(uint64(m.Radius))
	}
	if m.Iterations != 0 {
		n += 1 + sovModels(uint64(m.Iterations))
	}
	return n
}

func (m *PiResponse) Size() (n int) {
	var l int
	_ = l
	if m.Hit != 0 {
		n += 1 + sovModels(uint64(m.Hit))
	}
	if m.Iterations != 0 {
		n += 1 + sovModels(uint64(m.Iterations))
	}
	return n
}

func (m *VMatrixRequest) Size() (n int) {
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovModels(uint64(m.Size_))
	}
	if len(m.Vector) > 0 {
		n += 1 + sovModels(uint64(len(m.Vector)*8)) + len(m.Vector)*8
	}
	if len(m.MatrixRows) > 0 {
		for k, v := range m.MatrixRows {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovModels(uint64(l))
			}
			mapEntrySize := 1 + sovModels(uint64(k)) + l
			n += mapEntrySize + 1 + sovModels(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *VMatrixResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ResultVector) > 0 {
		for k, v := range m.ResultVector {
			_ = k
			_ = v
			mapEntrySize := 1 + sovModels(uint64(k)) + 1 + 8
			n += mapEntrySize + 1 + sovModels(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Row) Size() (n int) {
	var l int
	_ = l
	if len(m.Row) > 0 {
		n += 1 + sovModels(uint64(len(m.Row)*8)) + len(m.Row)*8
	}
	return n
}

func (m *WorkerLine) Size() (n int) {
	var l int
	_ = l
	if len(m.Workers) > 0 {
		for _, e := range m.Workers {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *Worker) Size() (n int) {
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	return n
}

func (m *MMatrixRequest) Size() (n int) {
	var l int
	_ = l
	if m.I != 0 {
		n += 1 + sovModels(uint64(m.I))
	}
	if m.J != 0 {
		n += 1 + sovModels(uint64(m.J))
	}
	if m.Rows != 0 {
		n += 1 + sovModels(uint64(m.Rows))
	}
	if m.Brows != 0 {
		n += 1 + sovModels(uint64(m.Brows))
	}
	if m.Bcolumns != 0 {
		n += 1 + sovModels(uint64(m.Bcolumns))
	}
	if m.Iter != 0 {
		n += 1 + sovModels(uint64(m.Iter))
	}
	if m.A != nil {
		l = m.A.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	if m.B != nil {
		l = m.B.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *WorkerNetwork) Size() (n int) {
	var l int
	_ = l
	if len(m.WorkerMatrix) > 0 {
		for k, v := range m.WorkerMatrix {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovModels(uint64(l))
			}
			mapEntrySize := 1 + sovModels(uint64(k)) + l
			n += mapEntrySize + 1 + sovModels(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MMatrixResponse) Size() (n int) {
	var l int
	_ = l
	if m.I != 0 {
		n += 1 + sovModels(uint64(m.I))
	}
	if m.J != 0 {
		n += 1 + sovModels(uint64(m.J))
	}
	if len(m.T) > 0 {
		for _, e := range m.T {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *SortRequest) Size() (n int) {
	var l int
	_ = l
	if m.Iter != 0 {
		n += 1 + sovModels(uint64(m.Iter))
	}
	if m.Number != 0 {
		n += 1 + sovModels(uint64(m.Number))
	}
	if len(m.DataLine) > 0 {
		l = 0
		for _, e := range m.DataLine {
			l += sovModels(uint64(e))
		}
		n += 1 + sovModels(uint64(l)) + l
	}
	return n
}

func (m *SortResponse) Size() (n int) {
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovModels(uint64(m.Number))
	}
	if len(m.DataLine) > 0 {
		l = 0
		for _, e := range m.DataLine {
			l += sovModels(uint64(e))
		}
		n += 1 + sovModels(uint64(l)) + l
	}
	return n
}

func sovModels(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radius", wireType)
			}
			m.Radius = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Radius |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iterations", wireType)
			}
			m.Iterations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iterations |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hit", wireType)
			}
			m.Hit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iterations", wireType)
			}
			m.Iterations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iterations |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMatrixRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMatrixRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMatrixRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				v2 := float64(math.Float64frombits(v))
				m.Vector = append(m.Vector, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModels
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					v2 := float64(math.Float64frombits(v))
					m.Vector = append(m.Vector, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatrixRows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.MatrixRows == nil {
				m.MatrixRows = make(map[uint64]*Row)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthModels
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthModels
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &Row{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.MatrixRows[mapkey] = mapvalue
			} else {
				var mapvalue *Row
				m.MatrixRows[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMatrixResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMatrixResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMatrixResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultVector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.ResultVector == nil {
				m.ResultVector = make(map[uint64]float64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				mapvaluetemp = uint64(dAtA[iNdEx-8])
				mapvaluetemp |= uint64(dAtA[iNdEx-7]) << 8
				mapvaluetemp |= uint64(dAtA[iNdEx-6]) << 16
				mapvaluetemp |= uint64(dAtA[iNdEx-5]) << 24
				mapvaluetemp |= uint64(dAtA[iNdEx-4]) << 32
				mapvaluetemp |= uint64(dAtA[iNdEx-3]) << 40
				mapvaluetemp |= uint64(dAtA[iNdEx-2]) << 48
				mapvaluetemp |= uint64(dAtA[iNdEx-1]) << 56
				mapvalue := math.Float64frombits(mapvaluetemp)
				m.ResultVector[mapkey] = mapvalue
			} else {
				var mapvalue float64
				m.ResultVector[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Row) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				v2 := float64(math.Float64frombits(v))
				m.Row = append(m.Row, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModels
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					v2 := float64(math.Float64frombits(v))
					m.Row = append(m.Row, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerLine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerLine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerLine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workers = append(m.Workers, &Worker{})
			if err := m.Workers[len(m.Workers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Worker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Worker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Worker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MMatrixRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MMatrixRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MMatrixRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			m.I = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field J", wireType)
			}
			m.J = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.J |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brows", wireType)
			}
			m.Brows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Brows |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bcolumns", wireType)
			}
			m.Bcolumns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bcolumns |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iter", wireType)
			}
			m.Iter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iter |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.A == nil {
				m.A = &MMatrixResponse{}
			}
			if err := m.A.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.B == nil {
				m.B = &MMatrixResponse{}
			}
			if err := m.B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerNetwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerNetwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerNetwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerMatrix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.WorkerMatrix == nil {
				m.WorkerMatrix = make(map[uint64]*WorkerLine)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthModels
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthModels
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &WorkerLine{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.WorkerMatrix[mapkey] = mapvalue
			} else {
				var mapvalue *WorkerLine
				m.WorkerMatrix[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MMatrixResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MMatrixResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MMatrixResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			m.I = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field J", wireType)
			}
			m.J = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.J |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.T = append(m.T, &Row{})
			if err := m.T[len(m.T)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SortRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iter", wireType)
			}
			m.Iter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iter |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DataLine = append(m.DataLine, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModels
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DataLine = append(m.DataLine, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLine", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SortResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DataLine = append(m.DataLine, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModels
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DataLine = append(m.DataLine, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLine", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModels
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModels(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModels = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto/models.proto", fileDescriptorModels) }

var fileDescriptorModels = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0xae, 0xd3, 0xcf, 0x6d, 0x6f, 0xd2, 0xa4, 0x1d, 0xa1, 0xd6, 0x64, 0x11, 0x05, 0x4b,
	0x40, 0x90, 0x50, 0x90, 0x8a, 0x84, 0x10, 0x0b, 0x90, 0x8a, 0x40, 0x08, 0x08, 0x42, 0x53, 0x51,
	0xd6, 0x76, 0x3d, 0x12, 0xd3, 0x24, 0x9e, 0x32, 0x33, 0x6e, 0x08, 0x4f, 0xc2, 0x96, 0x47, 0xe0,
	0x2d, 0x58, 0x76, 0xc1, 0x03, 0xa0, 0xf0, 0x22, 0x68, 0x7e, 0x1c, 0xec, 0xa6, 0xd0, 0xdd, 0x3d,
	0x33, 0xe7, 0x1e, 0x9f, 0x7b, 0xcf, 0x24, 0x48, 0x4e, 0xa5, 0xd0, 0xe2, 0xde, 0x54, 0x64, 0x6c,
	0xa2, 0x86, 0x16, 0x90, 0xd0, 0xa1, 0xf8, 0x29, 0x6e, 0xbe, 0xe5, 0x94, 0x7d, 0x2c, 0x98, 0xd2,
	0x64, 0x17, 0x43, 0x99, 0x64, 0xbc, 0x50, 0x11, 0xf4, 0x61, 0xb0, 0x46, 0x3d, 0x22, 0x3d, 0x44,
	0xae, 0x99, 0x4c, 0x34, 0x17, 0xb9, 0x8a, 0x02, 0x7b, 0x57, 0x39, 0x89, 0x1f, 0x23, 0x1a, 0x11,
	0x75, 0x2a, 0x72, 0xc5, 0xc8, 0x36, 0x36, 0x3e, 0x70, 0xed, 0x25, 0x4c, 0x79, 0x65, 0xff, 0x39,
	0x60, 0xfb, 0x68, 0x94, 0x68, 0xc9, 0x3f, 0x95, 0x56, 0x08, 0xae, 0x29, 0xfe, 0x99, 0x79, 0x15,
	0x5b, 0x1b, 0x7b, 0x67, 0xec, 0x58, 0x0b, 0x19, 0x05, 0xfd, 0xc6, 0x00, 0xa8, 0x47, 0xe4, 0x39,
	0xe2, 0xd4, 0x35, 0x8b, 0x99, 0x8a, 0x1a, 0xfd, 0xc6, 0xa0, 0xb9, 0x7f, 0x6b, 0xe8, 0xc7, 0xad,
	0xeb, 0x0e, 0x47, 0x4b, 0xe2, 0xb3, 0x5c, 0xcb, 0x39, 0xad, 0x74, 0x76, 0x5f, 0x62, 0xe7, 0xc2,
	0xb5, 0x99, 0x65, 0xcc, 0xe6, 0xe5, 0x2c, 0x63, 0x36, 0x27, 0x37, 0xf0, 0xff, 0xb3, 0x64, 0x52,
	0x30, 0x3b, 0x46, 0x73, 0xbf, 0x59, 0x7e, 0x87, 0x8a, 0x19, 0x75, 0x37, 0x8f, 0x82, 0x87, 0x10,
	0x7f, 0x05, 0xec, 0x2c, 0x3f, 0xed, 0x17, 0x33, 0xc2, 0x96, 0x64, 0xaa, 0x98, 0xe8, 0x23, 0x37,
	0x05, 0x58, 0xa7, 0x77, 0x56, 0x9c, 0x3a, 0xfa, 0x90, 0x56, 0xb8, 0xce, 0x6c, 0xad, 0xbd, 0xfb,
	0x04, 0x77, 0x56, 0x28, 0x97, 0x18, 0xbe, 0x56, 0x35, 0x0c, 0x55, 0x8f, 0x7b, 0xd8, 0xa0, 0x62,
	0x66, 0x5a, 0xa4, 0x98, 0x59, 0x37, 0x40, 0x4d, 0x19, 0x3f, 0x40, 0x7c, 0x2f, 0xe4, 0x98, 0xc9,
	0xd7, 0x3c, 0x67, 0x64, 0x80, 0xeb, 0x33, 0x8b, 0x94, 0x77, 0xdc, 0x2e, 0x1d, 0x3b, 0x12, 0x2d,
	0xaf, 0xe3, 0xbb, 0x18, 0xba, 0x23, 0x13, 0x5f, 0x92, 0x65, 0xd2, 0xfa, 0xd8, 0xa4, 0xb6, 0x26,
	0x6d, 0x0c, 0x78, 0xe6, 0xd3, 0x0f, 0x78, 0x16, 0xff, 0x00, 0x6c, 0x8f, 0xea, 0xa9, 0xb7, 0x10,
	0xb8, 0xf7, 0x0e, 0xdc, 0xa0, 0x13, 0xcf, 0x87, 0x13, 0x23, 0x29, 0x4d, 0xbe, 0x6b, 0xee, 0x45,
	0x98, 0xda, 0xcc, 0x96, 0xda, 0xc3, 0xd0, 0x1e, 0x3a, 0x40, 0xba, 0xb8, 0x91, 0x1e, 0x8b, 0x49,
	0x31, 0xcd, 0x55, 0xb4, 0x6e, 0x2f, 0x96, 0xd8, 0xa8, 0x98, 0x87, 0x17, 0x6d, 0x38, 0x15, 0x53,
	0x93, 0x9b, 0x08, 0x49, 0xb4, 0x69, 0xe3, 0xdc, 0x2b, 0x47, 0x1b, 0xd5, 0xc3, 0xa0, 0x90, 0x18,
	0x5a, 0x1a, 0xe1, 0x15, 0xb4, 0x34, 0xfe, 0x06, 0xb8, 0xe5, 0xb6, 0xf0, 0x86, 0x69, 0xb3, 0x19,
	0xf2, 0x0a, 0x5b, 0x6e, 0x43, 0x8e, 0xec, 0xb7, 0x78, 0xbb, 0xbe, 0x45, 0x4f, 0xf6, 0xc8, 0x31,
	0x7d, 0xea, 0xd5, 0xe6, 0xee, 0x21, 0xee, 0xac, 0x50, 0x2e, 0x49, 0x7d, 0x50, 0x7f, 0xa6, 0xa4,
	0xfe, 0x31, 0x93, 0x6b, 0xf5, 0x25, 0xbc, 0xc0, 0xce, 0x85, 0x49, 0xfe, 0x19, 0xc5, 0x75, 0x04,
	0xed, 0x7f, 0x67, 0xb5, 0xf7, 0x0f, 0x3a, 0x7e, 0x87, 0xcd, 0x43, 0x21, 0x75, 0xe5, 0x67, 0x6c,
	0xd7, 0x0d, 0x95, 0x75, 0xef, 0x62, 0x98, 0x17, 0xd3, 0x94, 0x49, 0x2f, 0xe8, 0x91, 0x89, 0x2d,
	0x4b, 0x74, 0x62, 0xbc, 0x59, 0xf1, 0x2d, 0xba, 0xc4, 0xf1, 0x01, 0xb6, 0x9c, 0xac, 0x77, 0xf7,
	0x47, 0x03, 0xfe, 0xaa, 0x11, 0xd4, 0x35, 0x0e, 0xb6, 0xbf, 0x2f, 0x7a, 0x70, 0xbe, 0xe8, 0xc1,
	0xcf, 0x45, 0x0f, 0xbe, 0xfc, 0xea, 0xfd, 0x97, 0x86, 0xf6, 0xbf, 0xf0, 0xfe, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x03, 0xb3, 0xb6, 0x76, 0x21, 0x05, 0x00, 0x00,
}
